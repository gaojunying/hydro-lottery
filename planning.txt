I'll find the range that oraclize is providing, how? By testing some results with 1 bytes to 20 bytes and seeing where those ranges land in remix since we need to use a testnet I believe.
I'll find a testing oraclize api for just that. Then I'll adjust those values to my desired lottery randomization with a mapping function based on this python one:

def translate(value, leftMin, leftMax, rightMin, rightMax):
    # Figure out how 'wide' each range is
    leftSpan = leftMax - leftMin
    rightSpan = rightMax - rightMin

    # Convert the left range into a 0-1 range (float)
    valueScaled = float(value - leftMin) / float(leftSpan)

    # Convert the 0-1 range into a value in the right range.
    return rightMin + (valueScaled * rightSpan)

Then I'll test the lottery ending by buying 2, 10 and 20 valid tickets in 3 different tests and seeing if the numbers are valid.

Oraclize is free for testnets: "To keep compatibility with the main-net deployed, smart contracts testing Oraclize on any of the testnets are expected to pay the same fee they would on the main-net. Since the payment expected is in testnet Ether, which holds no value, the calls to Oraclize are de facto free. Oraclize reserve the rights to discontinue the service for abuse or excessive use." https://docs.oraclize.it/#pricing


If oraclize fails, make sure to send some ether like 0.1 ETH (not wei)


Oraclize gives you a gigantic number, you need to cut it to your size with mod and the map those ranges. For instance, if you have 584 participants in a lottery, you have to cut the randomNumber % 1000 since we only want 3 digits where 999 is the maximum and 000 is the minimum. Simply <your-random-number> to map [0, 999] to [0, 584] so that it gives you a number within range. This is not needed if the random value is within range already.
